---
services:
  nifi-toolkit:
    image: apache/nifi-toolkit:1.28.1
    container_name: nifi-toolkit
    entrypoint: /bin/bash
    command: /tmp/tls-scripts/nifi-gen-certs.sh
    volumes:
      - tls-cert:/tmp/tls-certs
      - tls-scripts:/tmp/tls-scripts
      - tls-cert-ca:/tmp/cert
    environment:
      - KEYSTORE_PASSWORD_NIFI=${KEYSTORE_PASSWORD_NIFI}
      - KEYSTORE_PASSWORD_NIFI_REG=${KEYSTORE_PASSWORD_NIFI_REG}
      - TRUSTSTORE_PASSWORD=${TRUSTSTORE_PASSWORD}
  nifi-registry:
    image: local-nifi-registry:test
    restart: always
    depends_on:
      nifi-toolkit:
        condition: service_completed_successfully
      postgresql:
        condition: service_started
      postgresql-init:
        condition: service_completed_successfully
      keycloak:
        condition: service_started
    volumes:
      - tls-cert-reg:/tmp/tls-certs
      - tls-cert-ca:/tmp/cert
    ports:
      - 127.0.0.1:18080:18080
    environment:
      - AUTH=oidc
      - NIFI_REGISTRY_WEB_HTTPS_PORT=18080
      - NIFI_REGISTRY_WEB_HTTP_HOST=0.0.0.0
      - KEYSTORE_PATH=/tmp/tls-certs/keystore.p12
      - KEYSTORE_TYPE=PKCS12
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD_NIFI_REG}
      - TRUSTSTORE_PATH=/tmp/tls-certs/truststore.p12
      - TRUSTSTORE_TYPE=PKCS12
      - TRUSTSTORE_PASSWORD=${TRUSTSTORE_PASSWORD}
      - INITIAL_ADMIN_IDENTITY=admin
      - NIFI_REG_USE_PGDB=true
      - NIFI_REG_DB_URL=jdbc:postgresql://postgresql:5432/postgres
      - NIFI_REG_DB_USERNAME=postgres
      - NIFI_REG_DB_PASSWORD=${DB_PASSWORD}
      - OIDC_CLIENT_ID=frontend
      - OIDC_CLIENT_SECRET=frontend
      - "OIDC_DISCOVERY_URL_NEW=https://keycloak:8443/realms/nifi-test-realm/.well-known/openid-configuration"
      - NIFI_REG_DB_FLOW_AUTHORIZERS=cached
    container_name: local-nifi-registry-oidc
    hostname: nifi-registry
  consul:
    image: hashicorp/consul:1.20
    ports:
      - 127.0.0.1:8500:8500
    hostname: consul
  postgresql:
    image: postgres:16.8
    volumes:
      - pg-db:/var/lib/postgresql/data/pgdata
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    container_name: postgresql
    hostname: postgresql
  postgresql-init:
    image: postgres:16.8
    restart: on-failure:30
    depends_on:
      postgresql:
        condition: service_started
    volumes:
      - pg-init-db:/tmp/init-scripts/
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    entrypoint: psql
    command: "-h postgresql -p 5432 -U postgres -f /tmp/init-scripts/init.sql"
  keycloak:
    image: keycloak/keycloak:26.1.4
    hostname: keycloak
    restart: on-failure:3
    depends_on:
      postgresql:
        condition: service_started
      postgresql-init:
        condition: service_completed_successfully
    volumes:
      - keycloak-init:/opt/keycloak/data/import
      - tls-cert:/tmp/tls-certs
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_HTTPS_KEY_STORE_FILE: /tmp/tls-certs/keycloak-server.p12
      KC_HTTPS_KEY_STORE_PASSWORD: ${KEYCLOAK_TLS_PASS}
      KC_HTTPS_PORT: 8443
      KC_HTTP_ENABLED: false
    ports:
      - 28080:8080
      - 28443:8443
    command:
      - start-dev
      - "--import-realm"
      - "--hostname"
      - "https://localhost:28443"
      - "--hostname-backchannel-dynamic"
      - "true"
volumes:
  tls-scripts:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/.github/workflows/sh/
  tls-cert:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/temp-vol/tls-cert/
  tls-cert-reg:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/temp-vol/tls-cert/nifi-registry/
  tls-cert-ca:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/temp-vol/tls-cert/ca/
  pg-db:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/temp-vol/pg-db
  pg-init-db:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/.github/configuration/postgres/oidc/
  keycloak-init:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $BASE_DIR/.github/configuration/keycloak/
