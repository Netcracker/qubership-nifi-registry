---
name: 'Run NiFi Registry in specified mode and execute upgrade autotests'
description: 'Runs NiFi Registry and other containers and executes upgrade autotests: upgrades from 1.x to 2.x version'
inputs:
  run-mode:
    description: 'Autotest run mode. One of: upgrade-plain, upgrade-tls-db, upgrade-tls-db-std.'
    required: false
    default: 'upgrade-plain'
runs:
  using: "composite"
  steps:
    - name: Prepare env
      shell: bash
      id: prepare-env
      run: |
        echo "Preparing env..."
        chmod +x .github/workflows/sh/*.sh
        . .github/workflows/sh/nifi-lib.sh
        origRunMode="${{ inputs.run-mode }}"
        newRunMode="${origRunMode/upgrade-/}"
        echo "Original run-mode = $origRunMode, modified run mode = $newRunMode"
        setup_env_before_tests "$newRunMode"
        #prepare both new run mode and original run mode, only the latter must be used
        prepare_results_dir "$origRunMode"
        echo "RUN_MODE=$newRunMode" >> $GITHUB_OUTPUT
    - name: Run local nifi with 1.x version
      shell: bash
      run: |
        echo "Starting containers..."
        #latest tag before upgrade:
        export NIFI_REG_IMAGE='ghcr.io/netcracker/qubership-nifi-registry'
        export NIFI_REG_IMAGE_TAG='1.0.9'
        echo "Running with nifi registry version: $NIFI_REG_IMAGE:$NIFI_REG_IMAGE_TAG"
        docker compose -f .github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml --env-file ./docker.env up -d
    - name: Wait for nifi-registry container to start (plain)
      if: ${{ inputs.run-mode == 'upgrade-plain' }}
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        wait_nifi_reg_container "localhost" "18080" ".github/docker/plain/docker-compose.yaml" "false" \
          "5" "40" "${{ inputs.run-mode }}"
    - name: Wait for nifi-registry container to start (TLS)
      if: ${{ inputs.run-mode != 'upgrade-plain' }}
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        NIFI_CLIENT_PASSWORD=$(cat ./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.password)
        wait_nifi_reg_container "localhost" "18080" ".github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml" "true" \
          "5" "80" "${{ inputs.run-mode }}" "./temp-vol/tls-cert/nifi/nifi-cert.pem" \
          "./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.p12" "$NIFI_CLIENT_PASSWORD"
    - name: Run nifi registry policy API tests
      if: ${{ inputs.run-mode != 'upgrade-plain' }}
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'NiFi_Registry_Policy_API_Tests.postman_collection.json'
        env-name: 'NiFi_Reg_AT_TLS.json.postman_environment'
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'policy-and-users-tests'
        tls-certs-dir: "./temp-vol/tls-cert"
        tls-ca-certs: "nifi/nifi-cert.pem"
        tls-client-certs-config: "newman-tls-config.json"
        docker-compose-file: ".github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml"
    - name: Run nifi registry before upgrade API tests
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'NiFi_Registry_Before_Upgrade_API_Tests.postman_collection.json'
        env-name: ${{ inputs.run-mode != 'upgrade-plain' && 'NiFi_Reg_AT_TLS.json.postman_environment' || 'NiFi_Reg_AT.json.postman_environment' }}
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'before-upgrade-api-tests'
        tls-certs-dir: ${{ inputs.run-mode != 'upgrade-plain' && './temp-vol/tls-cert' || '' }}
        tls-ca-certs: ${{ inputs.run-mode != 'upgrade-plain' && 'nifi/nifi-cert.pem' || '' }}
        tls-client-certs-config: ${{ inputs.run-mode != 'upgrade-plain' && 'newman-tls-config.json' || '' }}
        docker-compose-file: ".github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml"
    - name: Run local nifi with 2.x version
      shell: bash
      run: |
        echo "Starting containers..."
        docker compose -f .github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml --env-file ./docker.env up -d
    - name: Wait for nifi-registry container to start (plain)
      if: ${{ inputs.run-mode == 'upgrade-plain' }}
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        wait_nifi_reg_container "localhost" "18080" ".github/docker/plain/docker-compose.yaml" "false" \
          "5" "40" "${{ inputs.run-mode }}"
    - name: Wait for nifi-registry container to start (TLS)
      if: ${{ inputs.run-mode != 'upgrade-plain' }}
      shell: bash
      continue-on-error: true
      run: |
        . .github/workflows/sh/nifi-lib.sh
        NIFI_CLIENT_PASSWORD=$(cat ./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.password)
        wait_nifi_reg_container "localhost" "18080" ".github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml" "true" \
          "5" "80" "${{ inputs.run-mode }}" "./temp-vol/tls-cert/nifi/nifi-cert.pem" \
          "./temp-vol/tls-cert/nifi/CN=admin_OU=NIFI.p12" "$NIFI_CLIENT_PASSWORD"
    - name: Run nifi registry after upgrade API tests
      continue-on-error: true
      uses: ./.github/actions/run-newman-tests
      with:
        collection-name: 'NiFi_Registry_After_Upgrade_API_Tests.postman_collection.json'
        env-name: ${{ inputs.run-mode != 'upgrade-plain' && 'NiFi_Reg_AT_TLS.json.postman_environment' || 'NiFi_Reg_AT.json.postman_environment' }}
        results-dir: '${{ inputs.run-mode }}'
        short-name: 'after-upgrade-api-tests'
        tls-certs-dir: ${{ inputs.run-mode != 'upgrade-plain' && './temp-vol/tls-cert' || '' }}
        tls-ca-certs: ${{ inputs.run-mode != 'upgrade-plain' && 'nifi/nifi-cert.pem' || '' }}
        tls-client-certs-config: ${{ inputs.run-mode != 'upgrade-plain' && 'newman-tls-config.json' || '' }}
        docker-compose-file: ".github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml"
    - name: Cleanup after tests
      shell: bash
      continue-on-error: true
      run: |
        echo "Stopping and removing containers"
        docker compose -f .github/docker/${{ steps.prepare-env.outputs.RUN_MODE }}/docker-compose.yaml --env-file ./docker.env down -v
        echo "Removing temporary volume data"
        sudo rm -rf ./temp-vol/
